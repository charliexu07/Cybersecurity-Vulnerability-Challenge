package edu.vanderbilt.cs;

import com.mycompany.myapp.*;
import static org.junit.Assert.*;

import com.mycompany.myapp.security.AuthoritiesConstants;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.MediaType;
import org.springframework.security.test.context.support.WithMockUser;
import org.springframework.test.context.junit4.SpringRunner;

import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.redirectedUrl;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.test.web.servlet.MockMvc;

import static org.springframework.security.test.web.servlet.request.SecurityMockMvcRequestPostProcessors.*;

@RunWith(SpringRunner.class)
@AutoConfigureMockMvc
@SpringBootTest(classes= JhipsterApp.class)
public class VulnerabilityTest {

    @Autowired
    private MockMvc mockMvc;

    @Test
    public void testUser() throws Exception {
        String result = mockMvc.perform(get("/api/applications")
            .with(csrf()))
            .andExpect(status().is4xxClientError())
            .andReturn().getResponse().getContentAsString();

        // Do something more sophisticated with the HTML down here
        assertTrue(result != null);
    }

    // This test should pass if vulnerability doesn't exist
    @Test
    public void testSQLInjection() throws Exception {
        System.out.println("---------------------------");
        mockMvc.perform(get("/api/jobs/add_customized_job").with(csrf()));
        mockMvc.perform(get("/api/jobs/search_by_position?position='online';delete from Job where position = 'test'").with(csrf()));
        String result = mockMvc.perform(get("/api/jobs/search_by_position?position='test'").with(csrf()))
            .andExpect(status().isOk())
            .andReturn().getResponse().getContentAsString();
        assertTrue(result.contains("test"));
    }

    // This test should pass if vulnerability doesn't exist
    @Test
    public void testXSS() throws Exception {
        String result = mockMvc
            .perform(get("/api/jobs/deadline_before_date?year=2020&month=11&day=%3Cscript%3Ealert(%27XSS!%27);%3C/script%3E")
                .accept(MediaType.TEXT_HTML_VALUE).with(csrf()))
            .andExpect(status().isOk())
            .andReturn().getResponse().getContentAsString();
        assertTrue(!result.contains("%3Cscript%3Ealert(%27XSS!%27);%3C/script%3E"));
    }
}
