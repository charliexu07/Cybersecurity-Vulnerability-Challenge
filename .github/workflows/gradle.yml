name: CI
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - name: Set up JDK 14
      uses: actions/setup-java@v1
      with:
        java-version: 14

    # Runs a single command using the runners shell
    - name: install jhipster
      run: sudo npm install -g generator-jhipster

    - uses: actions/checkout@v2

    - run: echo "::set-env name=NUM::$(ls -1 | wc -l)"
      env:
        ACTIONS_ALLOW_UNSECURE_COMMANDS: true

    - name: generate seed
      run: |
        git clone https://github.com/vu-cs3891-f20/jdl-samples
        cd jdl-samples
        echo "::set-env name=NAME::$(ls *.jh|sort -R |tail -1)"
      if: ${{ env.NUM == '1' }}

    - name: generate code
      run: |
        echo y | jhipster import-jdl jdl-samples/$NAME
        cat gradle.txt >> build.gradle
        rm gradle.txt
      if: ${{ env.NUM == '1' }}

    - name: Commit files
      env:
        user_email: ${{ secrets.USER_EMAIL }}
        user_name: ${{ secrets.USER_NAME }}
      run: |
        git config --local user.email $user_email
        git config --local user.name $user_name
        git add -A
        git commit -m "Add changes" -a
      if: ${{ env.NUM == '1' }}
    - name: Push changes
      uses: ad-m/github-push-action@master
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
      if: ${{ env.NUM == '1' }}
    - name: Create wrapper for gradle
      run: gradle wrapper --gradle-version 6.5.1 --distribution-type all
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    - name: Build with Gradle
      run: ./gradlew build
    - name: Show file content
      run: cat result.json
      if: always()
    - name: Create environment variable
      run: |
        echo "::set-env name=TIMESTAMP::$(date +%s)"
        echo "::set-env name=REPONAME::$(basename `git rev-parse --show-toplevel`)"
      env:
        ACTIONS_ALLOW_UNSECURE_COMMANDS: true
      if: always()
#    - name: Copy file to s3
#      shell: bash
#      env:
#        log_file_name: ${{env.REPONAME}}-${{env.TIMESTAMP}}.json
#        aws_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#        aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#        aws_s3_bucket: ${{ secrets.AWS_S3_BUCKET }}
#      run: |
#        sudo apt-get update && sudo apt-get -y install awscli
#        aws configure set aws_access_key_id $aws_key_id
#        aws configure set aws_secret_access_key $aws_secret_access_key
#        aws configure set default.region us-east-1
#        aws s3 cp result.json s3://$aws_s3_bucket/$REPONAME/$log_file_name
#      if: always()


